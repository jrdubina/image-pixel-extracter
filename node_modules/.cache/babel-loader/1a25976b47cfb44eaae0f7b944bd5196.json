{"ast":null,"code":"var _jsxFileName = \"/Users/jareddubina/Desktop/Project-Image-Sizer/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FileBase64 from 'react-file-base64';\nimport { Base64 } from 'js-base64';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      identifedAs: '',\n      files: ''\n    };\n  }\n\n  getFiles(files) {\n    this.setState({\n      files: files\n    });\n    this.identifyImage(this.state.files.base64);\n    this.imageData(files);\n  }\n\n  identifyImage(picture) {\n    const Clarifai = require('clarifai');\n\n    const clarifaiApp = new Clarifai.App({\n      apiKey: 'ba7fec128a0243c18186d47d861edb35'\n    });\n    const pictureBase64 = picture.split(',')[1];\n    clarifaiApp.models.predict(Clarifai.GENERAL_MODEL, {\n      base64: pictureBase64\n    }).then(response => {\n      let concepts = response['outputs'][0]['data']['concepts'];\n      console.log(concepts);\n      this.doesGolfBallExsist(concepts, pictureBase64, picture);\n    }).catch(err => console.log(err));\n  }\n\n  doesGolfBallExsist(concepts, pictureBase64, picture) {\n    for (let i = 0; i < concepts.length; i++) {\n      if (concepts[i].name === \"golf\") {\n        console.log('true => ' + concepts[i].name);\n        this.imageData(pictureBase64);\n        return;\n      }\n    }\n\n    alert('Cannot detect a golf ball in your image');\n  }\n\n  imageData(photo) {\n    console.log(photo);\n    const image = photo;\n    let canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    var imageData = context.getImageData(0, 0, canvas.width, canvas.height); // Now you can access pixel data from imageData.data.\n    // It's a one-dimensional array of RGBA values.\n    // Here's an example of how to get a pixel's color at (x,y)\n\n    var index = (2 * imageData.width + 2) * 4;\n    var red = imageData.data[index];\n    var green = imageData.data[index + 1];\n    var blue = imageData.data[index + 2];\n    var alpha = imageData.data[index + 3];\n    image.src = base64EncodedImage;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(FileBase64, {\n      multiple: true,\n      onDone: this.getFiles.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88\n  },\n  __self: this\n}), document.getElementById(\"image-sizer-app\"));","map":{"version":3,"sources":["/Users/jareddubina/Desktop/Project-Image-Sizer/src/index.js"],"names":["React","ReactDOM","FileBase64","Base64","App","Component","constructor","props","state","identifedAs","files","getFiles","setState","identifyImage","base64","imageData","picture","Clarifai","require","clarifaiApp","apiKey","pictureBase64","split","models","predict","GENERAL_MODEL","then","response","concepts","console","log","doesGolfBallExsist","catch","err","i","length","name","alert","photo","image","canvas","document","createElement","width","height","context","getContext","drawImage","getImageData","index","red","data","green","blue","alpha","src","base64EncodedImage","render","bind","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FileBase64 from 'react-file-base64';\nimport { Base64 } from 'js-base64';\n\nexport default class App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\t\n\t\tthis.state = { \n\t\t\tidentifedAs: '',\n\t\t\tfiles: ''\n\t\t};\n\t}\n\n\tgetFiles(files){\n\t    this.setState({ files: files })\n\t    this.identifyImage(this.state.files.base64);\n\t    this.imageData(files)\n\t  }\n\n\tidentifyImage (picture) {\n\t\tconst Clarifai = require('clarifai');\n\n\t\tconst clarifaiApp = new Clarifai.App({\n\t\t\tapiKey: 'ba7fec128a0243c18186d47d861edb35'\n\t\t});\n\n\t\tconst pictureBase64 = picture.split(',')[1];\n\n\t\tclarifaiApp.models.predict(Clarifai.GENERAL_MODEL, {base64: pictureBase64})\n\t\t\t.then((response) => {\n\t        let concepts = response['outputs'][0]['data']['concepts']\n\t        console.log(concepts)\n\n\t        this.doesGolfBallExsist(concepts, pictureBase64, picture);\n\t      })\n\t\t\t.catch((err) => console.log(err))\n\t  }\n\n\t  doesGolfBallExsist (concepts, pictureBase64, picture) {\n\t  \tfor (let i=0; i < concepts.length; i++) {\n        \tif (concepts[i].name === \"golf\") {\n        \t\tconsole.log('true => ' + concepts[i].name)\n        \t\tthis.imageData (pictureBase64);\n      \t\t\treturn;\n        \t}\n        }\n        alert('Cannot detect a golf ball in your image');\n\t  }\n\n\t  imageData (photo) {\n\t  \tconsole.log(photo)\n\t  \tconst image = photo;\n\t    let canvas = document.createElement('canvas');\n\t    canvas.width = image.width;\n\t    canvas.height = image.height;\n\n\t    var context = canvas.getContext('2d');\n\t    context.drawImage(image, 0, 0);\n\n\t    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n\t    // Now you can access pixel data from imageData.data.\n\t    // It's a one-dimensional array of RGBA values.\n\t    // Here's an example of how to get a pixel's color at (x,y)\n\t    var index = (2*imageData.width + 2) * 4;\n\t    var red = imageData.data[index];\n\t    var green = imageData.data[index + 1];\n\t    var blue = imageData.data[index + 2];\n\t    var alpha = imageData.data[index + 3];\n\t\timage.src = base64EncodedImage;\n\t  }\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t            <FileBase64\n\t\t\t        multiple={ true }\n\t\t\t        onDone={ this.getFiles.bind(this) } />\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\n\nReactDOM.render(<App />, document.getElementById(\"image-sizer-app\"));"]},"metadata":{},"sourceType":"module"}