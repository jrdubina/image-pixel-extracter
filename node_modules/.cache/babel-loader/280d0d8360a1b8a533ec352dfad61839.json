{"ast":null,"code":"var _jsxFileName = \"/Users/jareddubina/Desktop/Project-Image-Sizer/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FileBase64 from 'react-file-base64';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      identifedAs: '',\n      files: ''\n    };\n  }\n\n  getFiles(files) {\n    this.setState({\n      files: files\n    });\n    this.identifyImage(this.state.files[0].base64);\n  }\n\n  identifyImage(picture) {\n    const Clarifai = require('clarifai');\n\n    const clarifaiApp = new Clarifai.App({\n      apiKey: 'ba7fec128a0243c18186d47d861edb35'\n    });\n    const pictureBase64 = picture.split(',')[1];\n    clarifaiApp.models.predict(Clarifai.GENERAL_MODEL, {\n      base64: pictureBase64\n    }).then(response => {\n      let concepts = response['outputs'][0]['data']['concepts'];\n      console.log(concepts);\n      this.doesGolfBallExsist(concepts, pictureBase64);\n    }).catch(err => console.log(err));\n  }\n\n  doesGolfBallExsist(concepts, image) {\n    for (let i = 0; i < concepts.length; i++) {\n      if (concepts[i].name === \"golf\") {\n        console.log('true => ' + concepts[i].name);\n        this.imageData(image);\n        return;\n      }\n    }\n\n    alert('Cannot detect a golf ball in your image');\n  }\n\n  imageData(image) {\n    const png = image;\n    let line;\n    const y = 0;\n\n    while (line = png.readLine()) {\n      for (let x = 0; x < line.length; x++) {\n        const pixel = doSomethingWithPixelData(x, y, '#' + line[x].toString(16).padRight('0', 6));\n      }\n\n      y++;\n    }\n\n    this.doSomethingWithPixelData();\n  }\n\n  doSomethingWithPixelData(x, y, color) {// guess what? do something with pixel data here ;)\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(FileBase64, {\n      multiple: true,\n      onDone: this.getFiles.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n}\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}), document.getElementById(\"image-sizer-app\"));","map":{"version":3,"sources":["/Users/jareddubina/Desktop/Project-Image-Sizer/src/index.js"],"names":["React","ReactDOM","FileBase64","App","Component","constructor","props","state","identifedAs","files","getFiles","setState","identifyImage","base64","picture","Clarifai","require","clarifaiApp","apiKey","pictureBase64","split","models","predict","GENERAL_MODEL","then","response","concepts","console","log","doesGolfBallExsist","catch","err","image","i","length","name","imageData","alert","png","line","y","readLine","x","pixel","doSomethingWithPixelData","toString","padRight","color","render","bind","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FileBase64 from 'react-file-base64';\n\nexport default class App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\t\n\t\tthis.state = { \n\t\t\tidentifedAs: '',\n\t\t\tfiles: ''\n\t\t};\n\t}\n\n\tgetFiles(files){\n\t    this.setState({ files: files })\n\t    this.identifyImage(this.state.files[0].base64);\n\t  }\n\n\tidentifyImage (picture) {\n\t\tconst Clarifai = require('clarifai');\n\n\t\tconst clarifaiApp = new Clarifai.App({\n\t\t\tapiKey: 'ba7fec128a0243c18186d47d861edb35'\n\t\t});\n\n\t\tconst pictureBase64 = picture.split(',')[1];\n\n\t\tclarifaiApp.models.predict(Clarifai.GENERAL_MODEL, {base64: pictureBase64})\n\t\t\t.then((response) => {\n\t        let concepts = response['outputs'][0]['data']['concepts']\n\t        console.log(concepts)\n\n\t        this.doesGolfBallExsist(concepts, pictureBase64);\n\t      })\n\t\t\t.catch((err) => console.log(err))\n\t  }\n\n\t  doesGolfBallExsist (concepts, image) {\n\t  \tfor (let i=0; i < concepts.length; i++) {\n        \tif (concepts[i].name === \"golf\") {\n        \t\tconsole.log('true => ' + concepts[i].name)\n        \t\tthis.imageData (image);\n      \t\t\treturn\n        \t}\n        }\n        alert('Cannot detect a golf ball in your image');\n\t  }\n\n\t  imageData (image) {\n\t  \tconst png = image;\n\t\tlet line;\n\t\tconst y = 0;\n\t\twhile(line = png.readLine())\n\t\t{\n\t\t    for (let x = 0; x < line.length; x++){\n\t\t        const pixel = doSomethingWithPixelData(x, y, '#' + line[x].toString(16).padRight('0', 6));\n\t\t    }\n\t\t    y++;\n\t\t}\n\n\t\tthis.doSomethingWithPixelData();\n\t  }\n\n\t  \tdoSomethingWithPixelData(x, y, color) {\n\t\t    // guess what? do something with pixel data here ;)\n\t\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t            <FileBase64\n\t\t\t        multiple={ true }\n\t\t\t        onDone={ this.getFiles.bind(this) } />\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\n\nReactDOM.render(<App />, document.getElementById(\"image-sizer-app\"));"]},"metadata":{},"sourceType":"module"}