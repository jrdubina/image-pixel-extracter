{"ast":null,"code":"// Generated by CoffeeScript 1.4.0\n\n/*\n# MIT LICENSE\n# Copyright (c) 2011 Devon Govett\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of this \n# software and associated documentation files (the \"Software\"), to deal in the Software \n# without restriction, including without limitation the rights to use, copy, modify, merge, \n# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons \n# to whom the Software is furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all copies or \n# substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING \n# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n(function () {\n  var PNG, fs, zlib;\n  fs = require('fs');\n  zlib = require('zlib');\n\n  module.exports = PNG = function () {\n    PNG.decode = function (path, fn) {\n      return fs.readFile(path, function (err, file) {\n        var png;\n        png = new PNG(file);\n        return png.decode(function (pixels) {\n          return fn(pixels);\n        });\n      });\n    };\n\n    PNG.load = function (path) {\n      var file;\n      file = fs.readFileSync(path);\n      return new PNG(file);\n    };\n\n    function PNG(data) {\n      var chunkSize, colors, i, index, key, section, short, text, _i, _j, _ref;\n\n      this.data = data;\n      this.pos = 8;\n      this.palette = [];\n      this.imgData = [];\n      this.transparency = {};\n      this.text = {};\n\n      while (true) {\n        chunkSize = this.readUInt32();\n\n        section = function () {\n          var _i, _results;\n\n          _results = [];\n\n          for (i = _i = 0; _i < 4; i = ++_i) {\n            _results.push(String.fromCharCode(this.data[this.pos++]));\n          }\n\n          return _results;\n        }.call(this).join('');\n\n        switch (section) {\n          case 'IHDR':\n            this.width = this.readUInt32();\n            this.height = this.readUInt32();\n            this.bits = this.data[this.pos++];\n            this.colorType = this.data[this.pos++];\n            this.compressionMethod = this.data[this.pos++];\n            this.filterMethod = this.data[this.pos++];\n            this.interlaceMethod = this.data[this.pos++];\n            break;\n\n          case 'PLTE':\n            this.palette = this.read(chunkSize);\n            break;\n\n          case 'IDAT':\n            for (i = _i = 0; _i < chunkSize; i = _i += 1) {\n              this.imgData.push(this.data[this.pos++]);\n            }\n\n            break;\n\n          case 'tRNS':\n            this.transparency = {};\n\n            switch (this.colorType) {\n              case 3:\n                this.transparency.indexed = this.read(chunkSize);\n                short = 255 - this.transparency.indexed.length;\n\n                if (short > 0) {\n                  for (i = _j = 0; 0 <= short ? _j < short : _j > short; i = 0 <= short ? ++_j : --_j) {\n                    this.transparency.indexed.push(255);\n                  }\n                }\n\n                break;\n\n              case 0:\n                this.transparency.grayscale = this.read(chunkSize)[0];\n                break;\n\n              case 2:\n                this.transparency.rgb = this.read(chunkSize);\n            }\n\n            break;\n\n          case 'tEXt':\n            text = this.read(chunkSize);\n            index = text.indexOf(0);\n            key = String.fromCharCode.apply(String, text.slice(0, index));\n            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\n            break;\n\n          case 'IEND':\n            this.colors = function () {\n              switch (this.colorType) {\n                case 0:\n                case 3:\n                case 4:\n                  return 1;\n\n                case 2:\n                case 6:\n                  return 3;\n              }\n            }.call(this);\n\n            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;\n            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);\n            this.pixelBitlength = this.bits * colors;\n\n            this.colorSpace = function () {\n              switch (this.colors) {\n                case 1:\n                  return 'DeviceGray';\n\n                case 3:\n                  return 'DeviceRGB';\n              }\n            }.call(this);\n\n            this.imgData = new Buffer(this.imgData);\n            return;\n\n          default:\n            this.pos += chunkSize;\n        }\n\n        this.pos += 4;\n\n        if (this.pos > this.data.length) {\n          throw new Error(\"Incomplete or corrupt PNG file\");\n        }\n      }\n\n      return;\n    }\n\n    PNG.prototype.read = function (bytes) {\n      var i, _i, _results;\n\n      _results = [];\n\n      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {\n        _results.push(this.data[this.pos++]);\n      }\n\n      return _results;\n    };\n\n    PNG.prototype.readUInt32 = function () {\n      var b1, b2, b3, b4;\n      b1 = this.data[this.pos++] << 24;\n      b2 = this.data[this.pos++] << 16;\n      b3 = this.data[this.pos++] << 8;\n      b4 = this.data[this.pos++];\n      return b1 | b2 | b3 | b4;\n    };\n\n    PNG.prototype.readUInt16 = function () {\n      var b1, b2;\n      b1 = this.data[this.pos++] << 8;\n      b2 = this.data[this.pos++];\n      return b1 | b2;\n    };\n\n    PNG.prototype.decodePixels = function (fn) {\n      var _this = this;\n\n      return zlib.inflate(this.imgData, function (err, data) {\n        var byte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;\n\n        if (err) {\n          throw err;\n        }\n\n        pixelBytes = _this.pixelBitlength / 8;\n        scanlineLength = pixelBytes * _this.width;\n        pixels = new Buffer(scanlineLength * _this.height);\n        length = data.length;\n        row = 0;\n        pos = 0;\n        c = 0;\n\n        while (pos < length) {\n          switch (data[pos++]) {\n            case 0:\n              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {\n                pixels[c++] = data[pos++];\n              }\n\n              break;\n\n            case 1:\n              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {\n                byte = data[pos++];\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                pixels[c++] = (byte + left) % 256;\n              }\n\n              break;\n\n            case 2:\n              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {\n                byte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                pixels[c++] = (upper + byte) % 256;\n              }\n\n              break;\n\n            case 3:\n              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {\n                byte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                pixels[c++] = (byte + Math.floor((left + upper) / 2)) % 256;\n              }\n\n              break;\n\n            case 4:\n              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {\n                byte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n\n                if (row === 0) {\n                  upper = upperLeft = 0;\n                } else {\n                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];\n                }\n\n                p = left + upper - upperLeft;\n                pa = Math.abs(p - left);\n                pb = Math.abs(p - upper);\n                pc = Math.abs(p - upperLeft);\n\n                if (pa <= pb && pa <= pc) {\n                  paeth = left;\n                } else if (pb <= pc) {\n                  paeth = upper;\n                } else {\n                  paeth = upperLeft;\n                }\n\n                pixels[c++] = (byte + paeth) % 256;\n              }\n\n              break;\n\n            default:\n              throw new Error(\"Invalid filter algorithm: \" + data[pos - 1]);\n          }\n\n          row++;\n        }\n\n        return fn(pixels);\n      });\n    };\n\n    PNG.prototype.decodePalette = function () {\n      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;\n\n      palette = this.palette;\n      transparency = this.transparency.indexed || [];\n      ret = new Buffer(transparency.length + palette.length);\n      pos = 0;\n      length = palette.length;\n      c = 0;\n\n      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {\n        ret[pos++] = palette[i];\n        ret[pos++] = palette[i + 1];\n        ret[pos++] = palette[i + 2];\n        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;\n      }\n\n      return ret;\n    };\n\n    PNG.prototype.copyToImageData = function (imageData, pixels) {\n      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;\n\n      colors = this.colors;\n      palette = null;\n      alpha = this.hasAlphaChannel;\n\n      if (this.palette.length) {\n        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();\n        colors = 4;\n        alpha = true;\n      }\n\n      data = (imageData != null ? imageData.data : void 0) || imageData;\n      length = data.length;\n      input = palette || pixels;\n      i = j = 0;\n\n      if (colors === 1) {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          v = input[k++];\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      } else {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      }\n    };\n\n    PNG.prototype.decode = function (fn) {\n      var ret,\n          _this = this;\n\n      ret = new Buffer(this.width * this.height * 4);\n      return this.decodePixels(function (pixels) {\n        _this.copyToImageData(ret, pixels);\n\n        return fn(ret);\n      });\n    };\n\n    return PNG;\n  }();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}